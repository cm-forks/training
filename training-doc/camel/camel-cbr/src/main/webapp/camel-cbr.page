---
title: Content Based Router
--- name:overview

--- name:content pipeline:jade

.body
  :markdown

    # Table of Content

    {:toc}

    # 3. Content Based Router
    In this exercise, we will build and deploy some content-based routers. The first router uses an XPath query to perform routing decisions on XML payload. The second router uses a header – containing the name of the file that initiates the route – to perform routing.

    <img src=images/camel-cbr.png width=500 height=300/>

    ## 3.1 Review of Solution
    The files for this exercise are located in the directory camel-exercises-cbr/. Before beginning the exercise, locate and open each of the files in the table below and preview the file as instructed.

  :markdown
    <p></p>

    <table width="590" border="2" cellspacing="0">
    <tr valign="top">
      <td bgcolor="#F3F3F3"><font size="3" face="Times New Roman">File</font></td>
      <td bgcolor="#F3F3F3"><font size="3" face="Arial">Note</font></td>
      <td bgcolor="#F3F3F3"><font size="3" face="Times New Roman">Check</font></td></tr>
    <tr valign="top"><td rowspan="2"><font size="3" face="Courier New">pom.xml</font></td>
      <td><font size="3" face="Arial">Look at each of the dependencies in
      the &lt;dependencies&gt; section. Do you understand why each is required? </font>

      </td>
      <td><font size="3" face="Symbol">ð</font></td></tr>
    <tr valign="top"><td><font size="3" face="Arial">Examine the configuration
      instructions for the maven-bundle-plugin. Do you understand how the
      OSGi bundle is being created?</font></td>
      <td><font size="3" face="Symbol">ð</font></td></tr>
    <tr valign="top"><td rowspan="2"><font size="3" face="Courier New">RouteByCurrencyRouter.java</font></td>
      <td><font size="3" face="Arial">Examine the router; do you understand
      the flow of control? </font></td>
      <td><font size="3" face="Symbol">ð</font></td></tr>

    <tr valign="top"><td><font size="3" face="Arial">Why are the InitializingBean
      and DisposableBean interfaces implemented?</font></td>
      <td><font size="3" face="Symbol">ð</font></td></tr>
    <tr valign="top"><td><font size="3" face="Courier New">RouteByFileNameRouter.java</font></td>
      <td><font size="3" face="Arial">Examine the router; do you understand
      the flow of control?</font></td>
      <td><font size="3" face="Symbol">ð</font></td></tr>
    <tr valign="top"><td><font size="3" face="Courier New">bundle-context.xml</font></td>
      <td><font size="3" face="Arial">Do you understand how each route is
      being initialized?</font></td>

      <td><font size="3" face="Symbol">ð</font></td></tr>
    <tr valign="top"><td><font size="3" face="Courier New">camelContext.xml</font></td>
      <td><font size="3" face="Arial">Note how this file simply includes the
      bundle-context.xml file. This is to allow the camel:run plugin to re-use
      Spring configuration while running outside of an OSGi container.</font></td>
      <td><font size="3" face="Symbol">ð</font></td></tr>
    </table>


    ## 3.2	Building and Running the Solution
    To build the solution use 'mvn install'; to run the solution from the command-line, use 'mvn camel:run'.

    ## 3.3	Optional: Deploying the Solution in Servicemix 4
    To deploy the solution into Servicemix 4, install the 'camel-exercises-cbr' feature from the ServiceMix shell if you installed the entire exercise feature beforehand. Otherwise follow the readme.txt file.

        karaf@root> features:install camel-exercises-cbr

    ## 3.4	Validating the Solution
    The validation here is for the deployment inside Servicemix 4 but it works the same way when started with but then you don’t need to copy any files and the output directory would be inside ./target/test-classes/camel/out directory.
    The XPath router listens on the directory /camel-exercises/cbr/xml/in for XML files. Copy a sample file from the ./target/test-classes/camel/in/xml directory into /camel-exercises/cbr/xml/in. It should ‘disappear’ after a short interval, and be processed by the route and new files should appear in /camel-exercises/cbr/xml/out after a few seconds.

    The header-based router listens on the directory /camel-exercises/cbr/csv/in. Copy a sample file from the ./target/test-classes/camel/in/csv directory. Again, it should 'disappear' after a short interval, and be processed by the route and new files should appear in /camel-exercises/cbr/csv/out after a few seconds.