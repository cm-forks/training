/* NOTE this file is autogenerated by Scalate : see http://scalate.fusesource.org/ */
package scalate.errors

import scala.collection.JavaConversions._
import org.fusesource.scalate.support.TemplateConversions._

object $_scalate_$500_scaml {
  def $_scalate_$render($_scalate_$_context: _root_.org.fusesource.scalate.RenderContext): Unit = {
    import _root_.org.fusesource.scalate.support.RenderHelper.{sanitize=>$_scalate_$_sanitize, preserve=>$_scalate_$_preserve, indent=>$_scalate_$_indent, smart_sanitize=>$_scalate_$_smart_sanitize, attributes=>$_scalate_$_attributes}
    ;{
      implicit val context: org.fusesource.scalate.servlet.ServletRenderContext = $_scalate_$_context.attribute("context")
      import context._
      
    // common imports go here
    import Website._;
    
      
      //
      //       Copyright (C) 2009-2010 the original author or authors.

      //       See the notice.md file distributed with this work for additional

      //       information regarding copyright ownership.

      //
      //       Licensed under the Apache License, Version 2.0 (the "License");

      //       you may not use this file except in compliance with the License.

      //       You may obtain a copy of the License at

      //
      //           http://www.apache.org/licenses/LICENSE-2.0

      //
      //       Unless required by applicable law or agreed to in writing, software

      //       distributed under the License is distributed on an "AS IS" BASIS,

      //       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

      //       See the License for the specific language governing permissions and

      //       limitations under the License.

      //
            if ( !engine.isDevelopmentMode )
{
        $_scalate_$_context << ( "<div class=\"scalate-error-500\">\n  <h1>Server Error: We're sorry, but something went wrong.</h1>\n  <p>We've been notified about this issue and we'll take a look at it shortly.</p>\n</div>\n" );
      }
            else
{
                import util.parsing.input.Position

                import org.fusesource.scalate._

                import org.fusesource.scalate.console._

                val consoleHelper = new ConsoleHelper(context)

                import consoleHelper._

                response.setContentType("text/html")

                attributes("layout") = ""

        $_scalate_$_context << ( "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN\" \"http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd\"> \n<html lang=\"en\">\n  <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n    <meta name=\"keywords\" content=\"error\"/>\n    <title>Unexpected Failure</title>\n    <style type=\"text/css\">\n      " );
        $_scalate_$_context << ( $_scalate_$_indent ( "      ", $_scalate_$_context.value ( _root_.org.fusesource.scalate.filter.FilterRequest("plain", $_scalate_$_context.capture { 
          $_scalate_$_context << ( "html, body {\n    margin: 0;\n    padding: 0;\n    font-family: Helvetica, Arial, Sans;\n    background: #EEEEEE;\n}\n.block {\n    padding: 20px;\n    border-bottom: 1px solid #aaa;\n}\n#scalate-error .header h1 {\n    font-weight: normal;\n    font-size: 28px;\n    margin: 0;\n}\n#scalate-error .more {\n    color: #666;\n    font-size: 80%;\n    border: none;\n}\n#scalate-error .header {\n    background: #fcd2da;\n}\n#scalate-error .header p {\n    color: #333;\n}\n#scalate-error .details {\n    background: #f6f6f6;\n}\n#scalate-error .details h2 {\n    font-weight: normal;\n    font-size: 18px;\n    margin: 0 0 10px 0;\n}\n#scalate-error .details .lineNumber {\n    float: left;\n    display: block;\n    width: 40px;\n    text-align: right;\n    margin-right: 10px;\n    font-size: 14px;\n    font-family: monospace;\n    background: #333;\n    color: #fff;\n}\n#scalate-error .details .line {\n    clear: both;\n    color: #333;\n    margin-bottom: 1px;\n}\n#scalate-error .details pre {\n    font-size: 14px;\n    margin: 0;\n    overflow-x: hidden;\n}\n#scalate-error .details .error {\n    color: #c00 !important;\n}\n#scalate-error .details .error .lineNumber {\n    background: #c00;\n}\n#scalate-error .details .errorCol {\n    background: #c00;\n    color:#fff;\n}\n#scalate-error .details a {\n    text-decoration: none;\n}\n#scalate-error .details a:hover * {\n    cursor: pointer !important;\n}\n#scalate-error .details a:hover pre {\n    background: #FAFFCF !important;\n}\n\n#scalate-error .details .stacktrace {\n    clear: both;\n    color: #333;\n    margin-bottom: 1px;\n    font-size: 10px;\n}\n\n#scalate-error .nested {\n  padding-top:10px;\n  padding-left:10px;\n}\n\n#scalate-error .nested .block {\n  padding:10px;\n}\n#scalate-error .nested .header {\n  font-size:10px;\n}\n#scalate-error .nested .header h1 {\n  font-size:16px;\n}" );
        } ) ) ) );
        //         Wrap in a try catch block so if there is a error on this page it gets logged to the console

        $_scalate_$_context << ( "\n    </style>\n  </head>\n  <body>\n    <div id=\"content\">\n      <div class=\"wrapper\">\n" );
                try
{
          $_scalate_$_context << ( "        <link" );
          $_scalate_$_context << $_scalate_$_attributes( $_scalate_$_context, List( (
              "href"
            ,
                            uri("/css/scalate/errors.css")

            ), (
              "rel"
            ,
              "stylesheet"
            ), (
              "type"
            ,
              "text/css"
          ) ) )
          $_scalate_$_context << ( "/>\n" );
                    def displayError(file:String, pos:Position, message:String)
{
            $_scalate_$_context << ( "        <div class=\"header block\">\n          <h1>\n            " );
            $_scalate_$_context << ( $_scalate_$_indent ( "            ", $_scalate_$_context.value(
               message
            ) ) );
            $_scalate_$_context << ( "\n          </h1>\n        </div>\n        <div class=\"details block\">\n          <h2>\n            " );
            $_scalate_$_context << ( $_scalate_$_indent ( "            ", $_scalate_$_context.value(
                             editLink(file, pos.line, pos.column)
 {
                $_scalate_$_context << ( "            in " );
                $_scalate_$_context <<< (                 shorten(file)
 );
                $_scalate_$_context << ( " near line " );
                $_scalate_$_context <<< (                 pos.line
 );
                $_scalate_$_context << ( " col " );
                $_scalate_$_context <<< (                 pos.column
 );
                $_scalate_$_context << ( "\n" );
              }
            ) ) );
            $_scalate_$_context << ( "\n          </h2>\n" );
                        for (s <- lines(file, pos))
{
                            val ss = s.style(pos.line)

              $_scalate_$_context << ( "          " );
              $_scalate_$_context << ( $_scalate_$_indent ( "          ", $_scalate_$_context.value(
                                 editLink(file, s.line, (if (pos.line == s.line) pos.column else 1))
 {
                  $_scalate_$_context << ( "          <div" );
                  $_scalate_$_context << $_scalate_$_attributes( $_scalate_$_context, List( (
                      "class"
                    ,
                                            ss

                  ) ) )
                  $_scalate_$_context << ( ">\n            <span class=\"lineNumber\">\n              " );
                  $_scalate_$_context << ( $_scalate_$_indent ( "              ", $_scalate_$_context.value(
                     s.line
                  ) ) );
                  $_scalate_$_context << ( "\n            </span>\n" );
                                    if (pos.line == s.line)
{
                                        val (prefix, ch, postfix) = s.splitOnCharacter(pos.column - 1)

                    $_scalate_$_context << ( "            <pre>" );
                    $_scalate_$_context << ( $_scalate_$_preserve ( $_scalate_$_context.valueEscaped(
                       prefix
                    ) ) );
                    $_scalate_$_context << ( "<span class=\"errorCol\">" );
                    $_scalate_$_context << ( $_scalate_$_preserve ( $_scalate_$_context.valueEscaped(
                       ch
                    ) ) );
                    $_scalate_$_context << ( "</span>" );
                    $_scalate_$_context << ( $_scalate_$_preserve ( $_scalate_$_context.valueEscaped(
                       postfix
                    ) ) );
                    $_scalate_$_context << ( "</pre>\n" );
                  }
                                    else
{
                    $_scalate_$_context << ( "            <pre>" );
                    $_scalate_$_context << ( $_scalate_$_preserve ( $_scalate_$_context.valueEscaped(
                       s.source
                    ) ) );
                    $_scalate_$_context << ( "</pre>\n" );
                  }
                  $_scalate_$_context << ( "          </div>\n" );
                }
              ) ) );
              $_scalate_$_context << ( "\n" );
            }
            $_scalate_$_context << ( "        </div>\n" );
          }
                    def displayException(e:Throwable)
{
            $_scalate_$_context << ( "        <div class=\"header block\">\n          <h1>\n            " );
            $_scalate_$_context << ( $_scalate_$_indent ( "            ", $_scalate_$_context.value(
               e.getMessage
            ) ) );
            $_scalate_$_context << ( "\n          </h1>\n          <p>\n            " );
            $_scalate_$_context << ( $_scalate_$_indent ( "            ", $_scalate_$_context.value(
               e
            ) ) );
            $_scalate_$_context << ( "\n          </p>\n        </div>\n        <div class=\"details block\">\n" );
                        for( stack <- e.getStackTrace )
{
              $_scalate_$_context << ( "          " );
              $_scalate_$_context << ( $_scalate_$_indent ( "          ", $_scalate_$_context.value(
                 renderStackTraceElement(stack)
              ) ) );
              $_scalate_$_context << ( "\n" );
            }
                        if( e.getCause!=null )
{
              $_scalate_$_context << ( "          <div class=\"nested\">\n" );
                            displayException(e.getCause)

              $_scalate_$_context << ( "          </div>\n" );
            }
            $_scalate_$_context << ( "        </div>\n" );
          }
          $_scalate_$_context << ( "        <div id=\"scalate-error\">\n" );
                    exception match
{
                        case e:InvalidSyntaxException =>
{
                            displayError( e.template, e.pos, e.brief)

            }
                        case e:CompilerException =>
{
                            for ( error <- e.errors )
{
                                displayError(error.file, error.pos, error.message)

                                val o = error.original

                                if (o != null)
{
                  $_scalate_$_context << ( "          <div class=\"section block\">\n            " );
                  $_scalate_$_context << ( $_scalate_$_indent ( "            ", $_scalate_$_context.value(
                                         editLink(o.file, o.pos.line, o.pos.column)
 {
                      $_scalate_$_context << ( "            from generated " );
                      $_scalate_$_context <<< (                       shorten(o.file)
 );
                      $_scalate_$_context << ( " near line " );
                      $_scalate_$_context <<< (                       o.pos.line
 );
                      $_scalate_$_context << ( " col " );
                      $_scalate_$_context <<< (                       o.pos.line
 );
                      $_scalate_$_context << ( "\n" );
                    }
                  ) ) );
                  $_scalate_$_context << ( "\n          </div>\n" );
                }
              }
            }
                        case e:Throwable =>
{
                            displayException(e)

            }
                        case u =>
{
              $_scalate_$_context << ( "          <div class=\"header block\">\n            <h1>\n              " );
              $_scalate_$_context << ( $_scalate_$_indent ( "              ", $_scalate_$_context.value(
                 errorMessage
              ) ) );
              $_scalate_$_context << ( "\n            </h1>\n            <p>\n              " );
              $_scalate_$_context << ( $_scalate_$_indent ( "              ", $_scalate_$_context.value(
                 u
              ) ) );
              $_scalate_$_context << ( "\n            </p>\n          </div>\n" );
            }
          }
          $_scalate_$_context << ( "        </div>\n" );
        }
                catch
{
                    case e:Throwable=>

                    e.printStackTrace

          //           Fallback to a simple rendering of the error message

          $_scalate_$_context << ( "        <div class=\"header block\">\n          <h1>\n            " );
          $_scalate_$_context << ( $_scalate_$_indent ( "            ", $_scalate_$_context.value(
             errorMessage
          ) ) );
          $_scalate_$_context << ( "\n          </h1>\n        </div>\n" );
        }
        $_scalate_$_context << ( "      </div>\n    </div>\n  </body>\n</html>\n" );
      }
    }
  }
}


class $_scalate_$500_scaml extends _root_.org.fusesource.scalate.Template {
  def render(context: _root_.org.fusesource.scalate.RenderContext): Unit = $_scalate_$500_scaml.$_scalate_$render(context)
}
